/**
 * 
 */
package com.test.utils;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.io.FileUtils;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * Contains methods to generate detailed report for Appium tests with Testng
 * 
 * @author Ashraf Iftekhar, Mar 27, 2017
 *
 */
public class Reporting {

	static String pass, fail, skip, ignore, total;
	static String Tester, project, platform, device, Notes;

	static String path = System.getProperty("user.dir") + "/test-output/testng-results.xml";
	static File xml = new File(path);

	static char quote = '"';
	static String methodName, status;
	static String testrow, fullData;
	static int num = 0;
	static List<String> FormViewData;

	static String[] TestDetails = new String[2];
	static List<String[]> ArrList = new ArrayList<String[]>();

	public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException {
		parseXML();
		writeToHTML();
	}

	public static void parseXML() throws ParserConfigurationException, SAXException, IOException {
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		Document doc = dBuilder.parse(xml);
		doc.getDocumentElement().normalize();
		NodeList ResultList = doc.getElementsByTagName("testng-results");
		NodeList MethodList = doc.getElementsByTagName("test-method");
		for (int i = 0; i < ResultList.getLength(); i++) {
			if (ResultList.item(i) != null) {
				NamedNodeMap attributes = ResultList.item(i).getAttributes();
				pass = attributes.getNamedItem("passed").getNodeValue();
				fail = attributes.getNamedItem("failed").getNodeValue();
				skip = attributes.getNamedItem("skipped").getNodeValue();
				ignore = attributes.getNamedItem("ignored").getNodeValue();
				total = attributes.getNamedItem("total").getNodeValue();
			}
		}
		for (int i = 0; i < MethodList.getLength(); i++) {
			NamedNodeMap attributes = MethodList.item(i).getAttributes();
			TestDetails[0] = attributes.getNamedItem("name").getNodeValue();
			TestDetails[1] = attributes.getNamedItem("status").getNodeValue();
			ArrList.add(TestDetails);
		}
	}

	public static void writeToHTML() throws IOException {
		java.util.Date date = new java.util.Date();
		SimpleDateFormat ft = new SimpleDateFormat("E yyyy.MM.dd 'at' hh:mm:ss a zzz");
		File htmlTemplateFile = new File("/Users/md.ashrafiftekhar/Desktop/Test.html");
		String htmlString = FileUtils.readFileToString(htmlTemplateFile);
		htmlString = htmlString.replace("$Heading", "TestReport");

		htmlString = htmlString.replace("$P", pass);
		htmlString = htmlString.replace("$F", fail);
		htmlString = htmlString.replace("$S", skip);
		htmlString = htmlString.replace("$I", ignore);
		htmlString = htmlString.replace("$T", total);

		htmlString = htmlString.replace("$Tester", Tester + "");
		htmlString = htmlString.replace("$Date", ft.format(date));
		htmlString = htmlString.replace("$Project", project + "");
		htmlString = htmlString.replace("$Platform", platform + "");
		htmlString = htmlString.replace("$Device", device + "");

		for (String[] S : ArrList) {

			methodName = S[0];
			status = S[1];
			num = num + 1;
			testrow = "<tr class=" + quote + "test" + quote + "><td width=" + quote + "70" + quote + ">" + num
					+ "</td><td width=" + quote + 1000 + quote + ">" + methodName + "</td><td width=" + quote + 200
					+ quote + ">" + status + "</td></tr>";
			FormViewData.add(testrow);

		}

		for (String S : FormViewData) {
			fullData = fullData + S;
		}
		htmlString = htmlString.replace("$TestReults", fullData);

		File newHtmlFile = new File("/Users/md.ashrafiftekhar/Desktop/TestReport.html");
		FileUtils.writeStringToFile(newHtmlFile, htmlString);
		System.out.println("file written");

	}

	public static void addTestDetails(String TesterName, String Project, String platform, String device) {
		Tester = TesterName;
		project = Project;
		Reporting.platform = platform;
		Reporting.device = device;
	}

	public static void AddTesterNotes(String Notes) {
		Reporting.Notes = Notes;
	}

}
