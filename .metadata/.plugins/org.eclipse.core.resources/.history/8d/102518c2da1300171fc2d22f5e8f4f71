/**
 * 
 */
package com.test.utils;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.io.FileUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

/**
 * Contains methods to generate detailed report for Appium tests with Testng
 * 
 * @author Ashraf Iftekhar, Mar 27, 2017
 *
 */
public class Reporting {

	static List<List<String>> listOfLists = new ArrayList<List<String>>();
	static String[] counts;
	static String pass;
	static String fail;
	static String skip;
	static String ignore;
	static String total;
	static String path = System.getProperty("user.dir") + "/test-output/testng-results.xml";
	static String Tester, project, platform, device, Notes;
	static char quote = '"';
	static String methodName, status;
	static String testrow, fullData;
	static int num = 1;
	static List<String> FormViewData;

	static File xml = new File(path);

	public void main(String[] args) throws ParserConfigurationException, SAXException, IOException {
		MySaxParser saxParser = new MySaxParser(xml);

	    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	    Document doc = dBuilder.parse(xml);
	    doc.getDocumentElement().normalize();
	    NodeList list = doc.getChildNodes();
	    for (int i=0;i<list.getLength();i++)
	    {
	    	Node n = list.item(i);
	    	System.out.println(n.getNodeName());
	    }
		listOfLists = saxParser.values();
		counts = saxParser.Counts();

		pass = counts[0];
		fail = counts[1];
		skip = counts[2];
		ignore = counts[3];
		total = counts[4];
		//writeToHTML();
	}

	public static void writeToHTML() throws IOException {
		java.util.Date date = new java.util.Date();
		SimpleDateFormat ft = new SimpleDateFormat("E yyyy.MM.dd 'at' hh:mm:ss a zzz");
		File htmlTemplateFile = new File("/Users/md.ashrafiftekhar/Desktop/Test.html");
		String htmlString = FileUtils.readFileToString(htmlTemplateFile);
		htmlString = htmlString.replace("$Heading", "TestReport");

		htmlString = htmlString.replace("$P", pass);
		htmlString = htmlString.replace("$F", fail);
		htmlString = htmlString.replace("$S", skip);
		htmlString = htmlString.replace("$I", ignore);
		htmlString = htmlString.replace("$T", total);

		htmlString = htmlString.replace("$Tester", Tester + "");
		htmlString = htmlString.replace("$Date", ft.format(date));
		htmlString = htmlString.replace("$Project", project + "");
		htmlString = htmlString.replace("$Platform", platform + "");
		htmlString = htmlString.replace("$Device", device + "");

		for (List l : listOfLists) {
			for (int i = 0; i < l.size(); i++) {
				methodName = l.get(0).toString();
				status = l.get(1).toString();
				num = num + 1;
				testrow = "<tr class=" + quote + "test" + quote + "><td width=" + quote + "70" + quote + ">" + num
						+ "</td><td width=" + quote + 1000 + quote + ">" + methodName + "</td><td width=" + quote + 200
						+ quote + ">" + status + "</td></tr>";
				FormViewData.add(testrow);
			}
		}

		for (String S : FormViewData) {
			fullData = fullData + S;
		}
		htmlString = htmlString.replace("$TestReults", fullData);

		File newHtmlFile = new File("/Users/md.ashrafiftekhar/Desktop/TestReport.html");
		FileUtils.writeStringToFile(newHtmlFile, htmlString);
		System.out.println("file written");

	}

	public static void addTestDetails(String TesterName, String Project, String platform, String device) {
		Tester = TesterName;
		project = Project;
		Reporting.platform = platform;
		Reporting.device = device;
	}

	public static void AddTesterNotes(String Notes) {
		Reporting.Notes = Notes;
	}

}
